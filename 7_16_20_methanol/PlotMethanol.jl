using CSV, StatsPlots, Printf, DataFrames, Plots, Statistics, Distributions, PyCall

gr()

program_dir = "/home/cal/Documents/DSMC_Simulations/7_16_20_methanol"
data_dir = "/home/cal/Documents/DSMC_Simulations/7_16_20_methanol"
outputdir = "/home/cal/Documents/DSMC_Simulations/7_16_20_methanol/summary"


"""
    read_batch()

Reads in particle simulation data for a set of simulations generated by SPARTA and ParticleTracing.jl
"""
function read_batch()
    dirs = readdir()
    dir_pattern = r"flow_(\d+\.?\d+)_gap_(\d+\.?\d+)_len_(\d+\.?\d+)_T1_(\d+\.?\d+)_T2_(\d+\.?\d+)"
    part_pattern = r"DS2FF.methanol.DAT"
    cell_pattern = r"cell.surfs"

    data = DataFrame()

    for dir in dirs
        md = match(dir_pattern, dir)
        if md === nothing
            println("no match for: ", dir)
        else
            flow = parse(Float64, md.captures[1])
            gap = parse(Float64, md.captures[2])
            len = parse(Float64, md.captures[3])
            T1 = parse(Float64, md.captures[4])
            T2 = parse(Float64, md.captures[5])
            @printf("flow: %.3f gap: %.3f length: %.3f\n", flow, gap, len)
            subdirs = readdir(dir)
            if "data" in subdirs
                files = readdir(dir*"/data")
                part_file = nothing
                geom_exists = false
                max_x = 10.0E-3
                max_y = 10.0E-3
                for f in files
                    mc = match(cell_pattern, f)
                    if !(mc === nothing)
                        fname = dir*"/data/"*f
                        box = Matrix(CSV.read(fname, header = ["min","max"], skipto=6, limit=2,ignorerepeated=true,delim=' ',silencewarnings=true))
                        max_x = box[1,2]
                        max_y = box[2,2]
                        geom_exists = true
                    end
                end
                files = readdir(dir*"/data")
                for f in files
                    md = match(part_pattern, f)
                    if !(md === nothing) && geom_exists
                        part_file = f
                        valid = false
                        linenum = 0
                        # fname = dir*"/"*part_file
                        fname = dir*"/data/"*part_file
                        for line in eachline(fname)
                            if occursin("CELLS xc yc", line)
                                valid = true
                                break
                            end
                            linenum += 1
                            if linenum > 100
                                break
                            end
                        end
                        if valid
                            println(fname)
                            table = DataFrame!(CSV.File(fname,
                            header = ["x", "y", "T", "ρ", "ρm", "vx", "vy", "vz"], 
                            types = [Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64],
                            skipto=linenum+2, ignorerepeated=true,delim=' '))
                            # dropmissing!(table, disallowmissing=true)
                            table[!, :flow] .= flow
                            table[!, :gap] .= gap
                            table[!, :len] .= len
                            table[!, :T1] .= T1
                            table[!, :T2] .= T2
                            table[!, :maxx] .= max_x
                            table[!, :maxy] .= max_y
                            table[!, :axial] .= occursin("axial", fname)
                            append!(data, table)
                        else
                            println("particle data not valid.")
                        end
                    end
                end
            else
                println("data subdirectory not found.")
            end
        end
    end
    return data
end


function quiver_data(data, nx, ny)
    xmax = maximum(data.maxx)
    ymax = maximum(data.maxy)
    Δx = xmax/nx
    Δy = ymax/ny
    xs = 0:Δx:xmax
    ys = 0:Δy:ymax

    u = zeros(length(xs), length(ys))
    v = zeros(length(xs), length(ys))
    X = zeros(length(xs), length(ys))
    Y = zeros(length(xs), length(ys))
    ρ = zeros(length(xs), length(ys))

    for (i, x) in enumerate(xs)
        for (j, y) in enumerate(ys)
            d = data[(data.x .< x + Δx/2) .& (data.x .> x - Δx/2) .& (data.y .> y - Δy/2) .& (data.y .< y + Δy/2), :]
            if length(d.x) > 0
                u[i,j] = mean(d.vx)
                v[i,j] = mean(d.vy)
                ρ[i,j] = mean(d.ρ/1E6)
            else
                ρ[i,j] = NaN
            end
            X[i,j] = x
            Y[i,j] = y
        end
    end

    return X, Y, xs, ys, u, v, ρ
end

cd(data_dir)
data = read_batch()
data = data[data.T .> 0.0, :]
cd(program_dir)

fsurfs = data_dir*"/flow_4.00000_gap_0.00200_len_0.02000_T1_2.00000_T2_2.00000_methanol_0.08000_T_250.00000_inlet_axial/data/cell.surfs"
surfs = DataFrame!(CSV.File(fsurfs; skipto=10, ignorerepeated=true,delim=' ', header=["id", "x1", "y1", "x2", "y2", "nr", "np"], type=Float64))
A = (π .* (surfs.y1 .+ surfs.y2) .* sqrt.((surfs.y1 .- surfs.y2).^2 + (surfs.x1 .- surfs.x2).^2))
A[A .< 1E-7] .= Inf
surfs.m = surfs.nr ./ A
ms = deepcopy(surfs.m)

ss = surfs[surfs.x1 .> 0.06, :]
sstot = sum(ss.m)
println("total second stage axial: $sstot")

surfs.m .= log10.(surfs.m)
minv = sort(unique(surfs.m))[2]
surfs.m .= max.(surfs.m, minv-0.5)



sxmax = max(maximum(surfs.x1), maximum(surfs.x2))
symax = max(maximum(surfs.y1), maximum(surfs.y2))

d = data[data.axial, :]

X, Y, xs, ys, u, v, ρ = quiver_data(d, 100, 12)
sf = 0.00005

X2, Y2, xs2, ys2, u2, v2, ρ2 = quiver_data(d, 200, 24)

pts1 = zeros(0)
allpts1 = zeros(0)
vals = zeros(0)
for (j, y) in enumerate(ys2)
    for (i, x) in enumerate(xs2)
        push!(allpts1, x)
        push!(allpts1, y)
        if !isnan(ρ2[i,j])
            push!(pts1, x)
            push!(pts1, y)
            push!(vals, ρ2[i,j])
        end
    end
end

pts = zeros((length(pts1)÷2, 2))
allpts = zeros((length(allpts1)÷2, 2))
for i in 1:length(pts)÷2
    pts[i,:] .= pts1[2i-1:2i]
end
for i in 1:length(allpts)÷2
    allpts[i,:] .= allpts1[2i-1:2i]
end

scipyinterp = pyimport("scipy.interpolate")
interps = scipyinterp.griddata(pts, vals, allpts)
interps = reshape(interps, (length(xs2), :))

for (i, x) in enumerate(xs2)
    for (j, y) in enumerate(ys2)
        if (x > sxmax || y > symax) #&& isnan(ρ[i,j])
            ρ2[i,j] = interps[i,j]
        end
    end
end

mmin = minimum(surfs.m)
mmax = maximum(surfs.m)

C(g::ColorGradient) = RGB[g[z] for z=LinRange(0,1,100)]
csmap = C(cgrad(:inferno))

function tocolor(n) 
    return csmap[max(1,min(length(csmap),round(Int64, length(csmap)*(n - mmin)/(mmax-mmin))))]
end

minms = sort(unique(ms))[2]
maxms = maximum(ms)
cbar = plot(xlims=(1, maxms), ylims=(0,1), xscale=:log10, aspect_ratio=10, yaxis=false, xlabel="deposition rate (a.u.)")
w = (maxms-minms)/100
rectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])
for x in LinRange(minms, maxms, 100)
    plot!(cbar, rectangle(w, 1, x, 0), legend=nothing, color=tocolor(log10(x)), line=false, markerstrokewidth=0)
end


flowplot = heatmap(xs2, ys2, transpose(log10.(ρ2)), fill=true, xlims=(0,0.15), colorbar=:top, c = :grays_r, aspect_ratio=:equal, ylims=(0.0, symax), label=nothing, legend=false, colorbar_title="log10 density (1/cm^3)", title="axial inlet")
# quiver!(flowplot, vec(X), vec(Y), quiver=(vec(u .* sf),vec(v .* sf)), aspect_ratio=:equal, xrange=(0.0, 0.15), yrange=(0.0, symax), label=nothing, color="black")
for l in eachrow(surfs)
    plot!(flowplot, [l.x1, l.x2], [l.y1, l.y2], linewidth=2.0, label=nothing, linecolor=tocolor(l.m))
end

mvals = sort(unique(surfs.m))
# legendplot = scatter(zeros(length(mvals)), marker_z = mvals, c=:inferno)

# flowplot = plot(flowplot, legendplot, layout=(1,2))

plotdir = outputdir
plotpath = mkpath(plotdir)
cd(plotdir)
l = @layout [
    a{0.8h}
    b{0.2h}
]
flowplot  = plot(flowplot, cbar, layout=l)
savefig(flowplot, "flow_axial.pdf")
cd(program_dir)


fsurfs = data_dir*"/flow_4.00000_gap_0.00200_len_0.02000_T1_2.00000_T2_2.00000_methanol_0.08000_T_250.00000_inlet_side/data/cell.surfs"
surfs = DataFrame!(CSV.File(fsurfs; skipto=10, ignorerepeated=true,delim=' ', header=["id", "x1", "y1", "x2", "y2", "nr", "np"], type=Float64))
A = (π .* (surfs.y1 .+ surfs.y2) .* sqrt.((surfs.y1 .- surfs.y2).^2 + (surfs.x1 .- surfs.x2).^2))
A[A .< 1E-7] .= Inf

surfs.m = surfs.nr ./ A
ms = deepcopy(surfs.m)

ss = surfs[surfs.x1 .> 0.06, :]
sstot = sum(ss.m)
println("total second stage side: $sstot")

surfs.m .= log10.(surfs.m)
minv = sort(unique(surfs.m))[2]
surfs.m .= max.(surfs.m, minv-0.5)

sxmax = max(maximum(surfs.x1), maximum(surfs.x2))
symax = max(maximum(surfs.y1), maximum(surfs.y2))

d = data[data.axial .== false, :]

X, Y, xs, ys, u, v, ρ = quiver_data(d, 100, 12)
sf = 0.00005

X2, Y2, xs2, ys2, u2, v2, ρ2 = quiver_data(d, 200, 24)

pts1 = zeros(0)
allpts1 = zeros(0)
vals = zeros(0)
for (j, y) in enumerate(ys2)
    for (i, x) in enumerate(xs2)
        push!(allpts1, x)
        push!(allpts1, y)
        if !isnan(ρ2[i,j])
            push!(pts1, x)
            push!(pts1, y)
            push!(vals, ρ2[i,j])
        end
    end
end

pts = zeros((length(pts1)÷2, 2))
allpts = zeros((length(allpts1)÷2, 2))
for i in 1:length(pts)÷2
    pts[i,:] .= pts1[2i-1:2i]
end
for i in 1:length(allpts)÷2
    allpts[i,:] .= allpts1[2i-1:2i]
end

scipyinterp = pyimport("scipy.interpolate")
interps = scipyinterp.griddata(pts, vals, allpts)
interps = reshape(interps, (length(xs2), :))

for (i, x) in enumerate(xs2)
    for (j, y) in enumerate(ys2)
        if (x > sxmax || y > symax) #&& isnan(ρ[i,j])
            ρ2[i,j] = interps[i,j]
        end
    end
end

mmin = minimum(surfs.m)
mmax = maximum(surfs.m)

C(g::ColorGradient) = RGB[g[z] for z=LinRange(0,1,100)]
csmap = C(cgrad(:inferno))

function tocolor(n) 
    return csmap[max(1,min(length(csmap),round(Int64, length(csmap)*(n - mmin)/(mmax-mmin))))]
end


minms = sort(unique(ms))[2]
maxms = maximum(ms)
cbar = plot(xlims=(1, maxms), ylims=(0,1), xscale=:log10, aspect_ratio=10, yaxis=false)
w = (maxms-minms)/100
rectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])
for x in LinRange(minms, maxms, 100)
    plot!(cbar, rectangle(w, 1, x, 0), legend=nothing, color=tocolor(log10(x)), line=false, markerstrokewidth=0, xlabel="deposition rate (a.u.)")
end


flowplot = heatmap(xs2, ys2, transpose(log10.(ρ2)), fill=true, xlims=(0,0.15), colorbar=:top, c = :grays_r, aspect_ratio=:equal, ylims=(0.0, symax), label=nothing, legend=false, colorbar_title="log10 density (1/cm^3)", title="lateral inlet")
# quiver!(flowplot, vec(X), vec(Y), quiver=(vec(u .* sf),vec(v .* sf)), aspect_ratio=:equal, xrange=(0.0, 0.15), yrange=(0.0, symax), label=nothing, color="black")
for l in eachrow(surfs)
    plot!(flowplot, [l.x1, l.x2], [l.y1, l.y2], linewidth=2.0, label=nothing, linecolor=tocolor(l.m))
end

mvals = sort(unique(surfs.m))
# legendplot = scatter(zeros(length(mvals)), marker_z = mvals, c=:inferno)

# flowplot = plot(flowplot, legendplot, layout=(1,2))

plotdir = outputdir
plotpath = mkpath(plotdir)
cd(plotdir)
l = @layout [
    a{0.8h}
    b{0.2h}
]
flowplot  = plot(flowplot, cbar, layout=l)
savefig(flowplot, "flow_side.pdf")

try
    cmd = "firefox"
    arg = plotdir*"/flow_side.pdf"
    arg2 = plotdir*"/flow_axial.pdf"
    run(`$cmd $arg $arg2`)
catch
    println("firefox not found")
end
cd(program_dir)
