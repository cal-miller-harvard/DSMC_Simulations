using Luxor
using Printf

import Base.+
+(a::Point, b::Array{Point, 1}) = [a .+ i for i in b]

function toSPARTA(polygons, fname)
    npts = 0
    pts = Array{Tuple{Int32, Float64, Float64}}(undef, 0)
    lines = Array{Tuple{Int32, Int32, Int32}}(undef, 0)

    for pg in polygons
        firstpt = npts + 1
        for p in pg
            npts += 1
            push!(pts, (npts, round(p.x/(1000*mm), digits=5), round(p.y/(1000*mm),digits=5)))
            push!(lines, (npts, npts, npts+1))
        end
        lines[end] = (npts, npts, firstpt)
    end
    open(fname, "w") do f
        @printf(f, "Generated by DrawCell.jl\n\n%d points\n%d line\n\nPoints\n\n", npts, npts)
        for p in pts
            @printf(f, "%d %.3e %.3e\n", p[1], p[2], p[3])
        end
        @printf(f, "\nLines\n\n")
        for l in lines
            @printf(f, "%d %d %d\n", l[1], l[2], l[3])
        end
    end
end

function make_stage(len, id, od, raperture, taperture)
    return [
        Point(0, id),
        Point(len, id),
        Point(len, raperture),
        Point(len+taperture, raperture),
        Point(len+taperture, od),
        Point(0, od)
    ]
end

function make_mesh(dir, n, t, l, sep)
    if dir == :x
        return [box(Point(i*sep, 0), Point(i*sep + l, t)) for i in 0:n-1]
    elseif dir == :y
        return [box(Point(0, i*sep), Point(t, i*sep + l)) for i in 0:n-1]
    else
        throw(ArgumentError("dir must be :x or :y"))
    end
    return 0
end

xmax = 100mm
ymax = 30mm
Drawing(round(Int32,xmax), round(Int32,ymax), "test.pdf")
s1 = make_stage(10mm, 12.7mm, 22.23mm, 4.5mm, 0.6mm)
m1 = Point(BoundingBox(s1).corner2.x, 0.36mm) .+ make_mesh(:y, 4, 0.48mm, 0.48mm, 1.21mm)
s2 = Point(15mm, 0) .+ s1
polygons = [s1, s2, m1...]
toSPARTA(polygons, "test.data")

sethue("black")
setline(0.1mm)
for p in polygons
    poly(p, :stroke, close=true)
end
finish()
