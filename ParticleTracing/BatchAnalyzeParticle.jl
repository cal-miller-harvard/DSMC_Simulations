using CSV, StatsPlots, Printf, DataFrames, Plots, Statistics

pyplot()

program_dir = "/home/cal/Documents/DSMC_Simulations/ParticleTracing"
data_dir = "/home/cal/Documents/DSMC_Simulations/7_8_20_opaque_mesh"
# data_dir = "/home/cal/Documents/DSMC_Simulations/6_10_20_fixed_collisions"
# data_dir = "/home/cal/Documents/DSMC_Simulations/5_29_20_cold_guided"


"""
    read_batch()

Reads in particle simulation data for a set of simulations generated by SPARTA and ParticleTracing.jl
"""
function read_batch()
    dirs = readdir()
    dir_pattern = r"flow_(\d+\.?\d+)_gap_(\d+\.?\d+)_len_(\d+\.?\d+)_T1_(\d+\.?\d+)_T2_(\d+\.?\d+)"
    part_pattern2 = r"particles_omega_(\d+\.?\d+)_M_(\d+\.?\d+).*_sigma_(\d).*out"
    part_pattern = r"particles_omega_(\d+\.?\d+)_M_(\d+\.?\d+).*out"
    cell_pattern = r"cell.surfs"

    data = DataFrame()

    for dir in dirs
        md = match(dir_pattern, dir)
        if md === nothing
            println("no match for: ", dir)
        else
            flow = parse(Float64, md.captures[1])
            gap = parse(Float64, md.captures[2])
            len = parse(Float64, md.captures[3])
            T1 = parse(Float64, md.captures[4])
            T2 = parse(Float64, md.captures[5])
            @printf("flow: %.3f gap: %.3f length: %.3f\n", flow, gap, len)
            subdirs = readdir(dir)
            if "data" in subdirs
                files = readdir(dir*"/data")
                part_file = nothing
                geom_exists = false
                max_x = 10.0E-3
                max_y = 10.0E-3
                for f in files
                    mc = match(cell_pattern, f)
                    if !(mc === nothing)
                        fname = dir*"/data/"*f
                        box = Matrix(CSV.read(fname, header = ["min","max"], skipto=6, limit=2,ignorerepeated=true,delim=' ',silencewarnings=true))
                        max_x = box[1,2]
                        max_y = box[2,2]
                        geom_exists = true
                    end
                end
                files = readdir(dir*"/data")
                for f in files
                    md = match(part_pattern, f)
                    m2 = match(part_pattern2, f)
                    if !(md === nothing) && geom_exists
                        part_file = f
                        omega = parse(Float64, md.captures[1])
                        M = parse(Float64, md.captures[2])
                        sigma = (m2 === nothing) ? 1.0 : parse(Float64, m2.captures[3])
                        valid = false
                        linenum = 0
                        # fname = dir*"/"*part_file
                        fname = dir*"/data/"*part_file
                        for line in eachline(fname)
                            if occursin("idx x y z", line)
                                valid = true
                                break
                            end
                            linenum += 1
                            if linenum > 100
                                break
                            end
                        end
                        if valid
                            println(fname)
                            table = DataFrame(CSV.read(fname,
                            header = ["idx", "x", "y", "z", "xnext", "ynext", "znext", "vx", "vy", "vz", "collides", "time"], 
                            types = [Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64],
                            skipto=linenum+2, ignorerepeated=true,delim=' '))
                            dropmissing!(table, disallowmissing=true)
                            table[!, :flow] .= flow
                            table[!, :gap] .= gap
                            table[!, :len] .= len
                            table[!, :T1] .= T1
                            table[!, :T2] .= T2
                            table[!, :omega] .= omega
                            table[!, :M] .= M
                            table[!, :maxx] .= max_x
                            table[!, :maxy] .= max_y
                            table[!, :sigma] .= sigma
                            append!(data, table)
                        else
                            println("particle data not valid.")
                        end
                    end
                end
            else
                println("data subdirectory not found.")
            end
        end
    end
    return data
end


# Loading
# data_dir = "/home/cal/Documents/DSMC_Simulations/4_3_20_flow_gap_length"
cd(data_dir)
data = read_batch()
cd(program_dir)

# Analysis
lens = sort!(unique(data.len))
lens = [i for i in lens] 
flows = sort!(unique(data.flow))
gaps = [i for i in unique(data.gap)]
omegas = unique(data.omega)
omegas = [i for i in omegas] 
extracted = zeros(length(lens), length(flows), length(gaps), length(omegas))
slow = zeros(length(lens), length(flows), length(gaps), length(omegas))
masses = sort!(unique(data.M))
sigmas = sort!(unique(data.sigma))


for (i, len) in enumerate(lens)
    for (j, flow) in enumerate(flows)
        for (k, gap) in enumerate(gaps)
            for (l, omega) in enumerate(omegas)
                part = data[(data.len .== len) .& (data.flow .== flow) .& (data.gap .== gap) .& (data.omega .== omega), :]
                extr = part[part.znext .> part.maxx, :]
                extracted[i,j,k,l] = nrow(extr)/nrow(part)
                if(isnan(extracted[i,j,k,l]))
                    extracted[i,j,k,l] = 0
                end
                slowed = extr[(extr.vz .< 15.0) .& (extr.vz .> 0.0), :]
                slow[i,j,k,l] = nrow(slowed)/nrow(part)
                if(isnan(slow[i,j,k,l]))
                    slow[i,j,k,l] = 0
                end
            end
        end
    end
end

plotdir = data_dir*"/summary"
plotpath = mkpath(plotdir)
cd(plotdir)
N = 1000000


extrplot = plot(xlabel="flow (sccm)", ylabel="extraction")
vzplot = plot(xlabel="flow (sccm)", ylabel="vz_mean (m/s)")
Δθplot = plot(xlabel="flow (sccm)", ylabel="angular spread (deg)")

for m in masses
    for sigma in sigmas
        extrs = []
        vzs = []
        ΔΘs = []
        for flow in flows
            d = data[(data.flow .== flow) .& (data.sigma .== sigma) .& (data.M .== m), :]
            push!(extrs, length(d.vz)/N)
            vzmean = mean(d.vz)
            vradFWHM = 2.354*std(sqrt.(d.vx.^2 .+ d.vy.^2))
            push!(vzs, vzmean)
            push!(ΔΘs, 57.29*2*atan(vradFWHM/(2*vzmean)))
        end
        if sum(extrs) > 0
            plot!(extrplot, flows, extrs, label=@sprintf("m: %f sigma: %f ", m, sigma))
            plot!(vzplot, flows, vzs, label=@sprintf("m: %f sigma: %f ", m, sigma))
            plot!(Δθplot, flows, ΔΘs, label=@sprintf("m: %f sigma: %f ", m, sigma))
            df = DataFrame(flow = flows, extraction = extrs, vzmean = vzs, divergence = ΔΘs)
            CSV.write(@sprintf("data_mass_%.3f_sigma_%.3f.csv", m, sigma), df)
        end
    end
end

savefig(extrplot, "extr.pdf")
savefig(vzplot, "vz.pdf")
savefig(Δθplot, "angular_spread.pdf")

colors = cgrad(:inferno, scale = :log)

# extr_0 = data[(data.znext .> data.maxx) .& (data.omega .== 0) .& (data.ynext .< data.maxy), :]
# extr_0 = data[(data.znext .> data.maxx) .& (data.omega .== 0) .& (data.ynext .< data.maxy), :]
extr_0 = data

slow_0 = extr_0[(sqrt.(extr_0.vz.^2 .+ extr_0.vy.^2 .+extr_0.vx.^2) .< 10), :]

N = 1000000
bins = [i for i in 0:3:60]
slowbins = [i for i in 0:0.5:10]

for T2 in unique(data.T2)
    for M in unique(extr_0.M)
        hist0 = plot(legend=:outerright, xlabel="v (m/s)", ylabel = "n (per 10^6)")
        slow0 = plot(legend=:outerright, xlabel="v (m/s)", ylabel = "n (per 10^6)")
        vmed0 = plot(legend=false, xlabel="gap (m)", ylabel = "v_median (m/s)")
        extr0 = plot(legend=:topright, xlabel="gap (m)", ylabel = "fraction extracted")

        for len in lens
            vmeds = []
            fracs = []
            gaps_plot = []
            plot_this = false
            for gap in gaps
                extr = extr_0
                d = extr[(extr.len .== len) .& (extr.gap .== gap) .& (extr.M .== M) .& (extr.T2 .== T2), :]
                vs = sqrt.(d.vz.^2 .+ d.vx.^2 .+ d.vy.^2)
                if length(vs) > 0
                    frac = length(vs)/N
                    push!(vmeds, Statistics.median(vs))
                    push!(fracs, frac)
                    push!(gaps_plot, gap)
                    stephist!(hist0, vs, label="gap: $gap len: $len extr: $frac", normed=false,bins=bins)
                    plot_this = true
                end

                extr = slow_0
                d = extr[(extr.len .== len) .& (extr.gap .== gap) .& (extr.M .== M) .& (extr.T2 .== T2), :]
                vs = sqrt.(d.vz.^2 .+ d.vx.^2 .+ d.vy.^2)
                if length(vs) > 0
                    frac = length(vs)/N
                    stephist!(slow0, vs, label="gap: $gap len: $len extr: $frac", normed=false,bins=slowbins)
                    plot_this = true
                end
            end
            if plot_this
                plot!(vmed0, gaps_plot, vmeds, m=(3))
                plot!(extr0, gaps_plot, fracs, m=(3), label="len: $len")
            end
        end
        savefig(hist0, "hist_M_$(M)_T2_$(T2)_omega_0.pdf")
        savefig(slow0, "slow_M_$(M)_T2_$(T2)_omega_0.pdf")
        savefig(plot(vmed0, extr0, size=(800,400)), "vmed_extr_M_$(M)_T2_$(T2)_omega_0.pdf")
    end
end
cd(program_dir)
