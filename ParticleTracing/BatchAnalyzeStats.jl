using CSV, StatsPlots, Printf, DataFrames, Plots, Statistics

program_dir = "/home/cal/Documents/DSMC_Simulations/ParticleTracing"
data_dir = "/home/cal/Documents/DSMC_Simulations/4_24_20_long_second_stage"


"""
    read_batch()

Reads in particle simulation data for a set of simulations generated by SPARTA and ParticleTracing.jl
"""
function read_batch()
    dirs = readdir()
    dir_pattern = r"flow_(\d*\.?\d*)_gap_(\d*\.?\d*)_len_(\d*\.?\d*)"
    part_pattern = r"particles_omega_(\d*\.?\d*)_job_(\d+).out"
    stats_pattern = r"stats_omega_(\d*\.?\d*).csv"
    exitstats_pattern = r"exitstats_omega_(\d*\.?\d*).csv"
    cell_pattern = r"cell.(\d+).surfs"

    data = DataFrame()

    for dir in dirs
        md = match(dir_pattern, dir)
        if md === nothing
            println("no match for: ", dir)
        else
            flow = parse(Float64, md.captures[1])
            gap = parse(Float64, md.captures[2])
            len = parse(Float64, md.captures[3])
            @printf("flow: %.3f gap: %.3f length: %.3f\n", flow, gap, len)
            subdirs = readdir(dir)
            if "data" in subdirs
                files = readdir(dir*"/data")
                part_file = nothing
                geom_exists = false
                max_x = 10.0E-3
                for f in files
                    mc = match(cell_pattern, f)
                    if !(mc === nothing)
                        fname = dir*"/data/"*f
                        box = Matrix(CSV.read(fname, header = ["min","max"], skipto=6, limit=2,ignorerepeated=true,delim=' ',silencewarnings=true))
                        max_x = box[1,2]
                        geom_exists = true
                    end
                end
                for f in files
                    # mes = match(stats_pattern, f)
                    mes = match(exitstats_pattern, f)
                    if !(mes === nothing) && geom_exists
                        stats_file = f
                        omega = parse(Float64, mes.captures[1])
                        valid = false
                        linenum = 0
                        fname = dir*"/data/"*stats_file
                        for line in eachline(fname)
                            if occursin("r,z,n,t,", line)
                                valid = true
                                break
                            end
                            linenum += 1
                            if linenum > 100
                                break
                            end
                        end
                        if valid
                            table = CSV.read(fname,
                            header = ["r","z","n","t","tvar","vr","vz","vrvar","vzvar","vrvzcov"], 
                            type = Float64,
                            skipto=linenum+2, ignorerepeated=true,delim=',')
                            table[!, :flow] .= flow
                            table[!, :gap] .= gap
                            table[!, :len] .= len
                            table[!, :omega] .= omega
                            table[!, :maxx] .= max_x
                            append!(data, table)
                        else
                            println("particle data not valid.")
                        end
                    end
                end
            else
                println("data subdirectory not found.")
            end
        end
    end
    return data
end


# Loading
cd(data_dir)
data = read_batch()
cd(program_dir)

# Analysis
lens = sort(unique(data.len))[1:3:end]
flows = unique(data.flow)
gaps = unique(data.gap)
omegas = unique(data.omega)


plotdir = data_dir*"/summary"
plotpath = mkpath(plotdir)
cd(plotdir)

sx = 600
sy = 400
rmax = 0.015
yrange = (0.0, 100.0)
xrange = (0.0, 0.30)

colors = palette(:default)

for (i, gap) in enumerate(gaps)
    plt0 = plot(xlabel="z", ylabel="vz", ylims=yrange, xlims=xrange)
    plt300 = plot(xlabel="z", ylabel="vz", ylims=yrange, xlims=xrange)
    vline!(plt0, [0.06509, 0.06509+gap],label="",color=:black)
    vline!(plt300, [0.06509, 0.06509+gap],label="",color=:black)
    for (j, len) in enumerate(lens)
        d0 = data[(data.omega .== 0) .& (data.gap .== gap) .& (data.len .== len) .& (data.r .< rmax) .& (data.n .> 0),:]
        d300 = data[(data.omega .== 300) .& (data.gap .== gap) .& (data.len .== len) .& (data.r .< rmax) .& (data.n .> 0),:]
        zs =sort(unique(d0.z))
        vz0 = [mean(d0.vz[d0.z .== z]) for z in zs]
        vz300 = [mean(d300.vz[d300.z .== z]) for z in zs]
        plot!(plt0, zs, vz0, label=len,size=(sx,sy),legend=:topleft,title=@sprintf("omega: 0, gap: %.0f mm", 1000*gap),color=colors[j])
        plot!(plt300, zs, vz300, label=len,size=(sx,sy),legend=:topleft,title=@sprintf("omega: 300, gap: %.0f mm", 1000*gap),color=colors[j])
        vline!(plt0, [0.06509+gap+len+2.1E-3],label="",color=colors[j])
        vline!(plt300, [0.06509+gap+len+2.1E-3],label="",color=colors[j])
    end
    plot(plt0,plt300,
    layout=@layout grid(2,1))
    savefig(@sprintf("stat_gap_%.3f.pdf", gap))

end

cd(program_dir)
