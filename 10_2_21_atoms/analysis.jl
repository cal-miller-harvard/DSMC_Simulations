using CSV, StatsPlots, Printf, DataFrames, DataFramesMeta, Plots, Statistics

# pyplot()

data_dir = "/Users/cal/DSMC_Simulations/10_2_21_atoms"


"""
    read_batch()

Reads in particle simulation data for a set of simulations generated by SPARTA and ParticleTracing.jl
"""
function read_batch()
    dirs = readdir(data_dir)
    dir_pattern = r"flow_(\d+\.?\d+)_T2_(\d+\.?\d+)"
    part_pattern = r"particles_sigma_(\d+\.?\d+e?-?\d*)_M_(\d+\.?\d+).*out"
    cell_pattern = r"cell.surfs"

    data = DataFrame()

    for d in dirs
        dir = data_dir*"/"*d
        md = match(dir_pattern, dir)
        if md === nothing
            println("no match for: ", dir)
        else
            flow = parse(Float64, md.captures[1])
            T2 = parse(Float64, md.captures[2])
            @printf("flow: %.3f t2: %.3f\n", flow, T2)
            subdirs = readdir(dir)
            if "data" in subdirs
                files = readdir(dir*"/data")
                part_file = nothing
                geom_exists = false
                max_x = 10.0E-3
                max_y = 10.0E-3
                for f in files
                    mc = match(cell_pattern, f)
                    if !(mc === nothing)
                        fname = dir*"/data/"*f
                        box = CSV.read(fname, DataFrame, header = ["min","max"], skipto=6, limit=2,ignorerepeated=true,delim=' ',silencewarnings=true) |> Matrix
                        max_x = box[1,2]
                        max_y = box[2,2]
                        geom_exists = true
                    end
                end
                files = readdir(dir*"/data")
                for f in files
                    md = match(part_pattern, f)
                    if !(md === nothing) && geom_exists
                        part_file = f
                        M = parse(Float64, md.captures[2])
                        sigma = parse(Float64, md.captures[1])
                        valid = false
                        linenum = 0
                        fname = dir*"/data/"*part_file
                        for line in eachline(fname)
                            if occursin("idx x y z", line)
                                valid = true
                                break
                            end
                            linenum += 1
                            if linenum > 100
                                break
                            end
                        end
                        if valid
                            println(fname)
                            table = CSV.read(fname, DataFrame,
                            header = ["idx", "x", "y", "z", "xnext", "ynext", "znext", "vx", "vy", "vz", "collides", "time"], 
                            types = [Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64],
                            skipto=linenum+2, ignorerepeated=true,delim=' ')
                            dropmissing!(table, disallowmissing=true)
                            table[!, :flow] .= flow
                            table[!, :T2] .= T2
                            table[!, :M] .= M
                            table[!, :maxx] .= max_x
                            table[!, :maxy] .= max_y
                            table[!, :sigma] .= sigma
                            table[!, :final] .= table[!, :idx] .> 0
                            table[!, :idx] .= abs.(table[!, :idx])
                            table[!, :r] .= sqrt.(table[!, :x].^2 .+ table[!, :y].^2)
                            table[!, :rnext] .= sqrt.(table[!, :xnext].^2 .+ table[!, :ynext].^2)
                            append!(data, table)
                        else
                            println("particle data not valid.")
                        end
                    end
                end
            else
                println("data subdirectory not found.")
            end
        end
    end
    return data
end

function r_at_z(x, y, z, xnext, ynext, znext, zeval)
    zfrac = (zeval - z)/(znext - z)
    xeval = x + (xnext - x)*zfrac
    yeval = y + (ynext - y)*zfrac
    return sqrt(xeval^2 + yeval^2)
end

data = read_batch()

max_r = 10E-3
zs = 60E-3:10E-3:200E-3
len_cell = 0.10887

summary = DataFrame()
for z in zs
    data_z =  @subset(data, :z .<= z, :znext .> z, r_at_z.(:x, :y, :z, :xnext, :ynext, :znext, z) .< max_r)
    group = groupby(data_z, [:M, :sigma, :flow, :T2])
    table = @combine(group, :z = 1E3*(z - len_cell), :vz =mean(:vz), :Ïƒvz = std(:vz)/(sqrt(length(:vz))), :n = length(:vz))
    append!(summary, table)
end

mkpath("plots")

# Plot forward velocities
for M in [23.0, 40.0, 173.0]
    if M == 23
        name = "Na"
    elseif M == 40
        name = "Ca"
    elseif M == 173
        name = "Yb"
    end
    fig = plot(xlabel="Distance from aperture (mm)", ylabel="Forward velocity (m/s)", title="$name forward velocity simulation", legend=:topleft)
    subset = @subset(summary, :M .== M, :n .> 1, :sigma .< 8E-19)
    for T2 in unique(subset.T2), flow in unique(subset.flow)
        subset2 = @subset(subset, :flow .== flow, :T2 .== T2)
        plot!(fig, subset2.z, subset2.vz, label=@sprintf("%.1f sccm, %.1f K", flow, T2), linestyle=(T2 < 2 ? :solid : :dash))
    end
    savefig(fig, "plots/$(name)_forward_velocity.pdf")
end

# Compare with initializing particles near aperture
data_Yb = @subset(data, :M .== 173.0, :T2 .== 0.7, :flow .== 4.0, :final .== true)
data_Yb_aperture = @subset(data, :M .== 174.0, :T2 .== 0.7, :flow .== 4.0, :final .== true)

fig = histogram(data_Yb.vz, xlabel="Forward velocity (m/s)", normalize=true, label="Back, n=$(nrow(data_Yb))", opacity=0.5, xlims=[0.0,40.0], bins=0:2:40, title="Comparing start position: T=0.7 K, flow=4 sccm")
histogram!(fig, data_Yb_aperture.vz, normalize=true, label="Front, n=$(nrow(data_Yb_aperture))", opacity=0.5, bins=0:2:40)
savefig(fig, "plots/Yb_compare_initialization.pdf")

# Compare Na cross section
fig = plot(xlabel="Distance from aperture (mm)", ylabel="Forward velocity (m/s)", title="Na forward velocity vs cross section: T=0.7 K, flow=4 sccm", legend=:topleft)
subset1 = @subset(data, :M .== 23.0, :sigma .< 8E-19, :T2 .== 0.7, :flow .== 4.0, :final .== true)
subset2 = @subset(data, :M .== 23.0, :sigma .>= 8E-19, :T2 .== 0.7, :flow .== 4.0, :final .== true)
fig = histogram(subset1.vz, xlabel="Forward velocity (m/s)", normalize=true, label="8.5E-19 m^2", opacity=0.5, xlims=[0.0,40.0], bins=0:2:40)
histogram!(fig, subset2.vz, normalize=true, label="4.2E-19 m^2", opacity=0.5, bins=0:2:40)
savefig(fig, "plots/Na_compare_cross_section.pdf")
