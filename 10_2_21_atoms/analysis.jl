using CSV, StatsPlots, Printf, DataFrames, Plots, Statistics

# pyplot()

data_dir = "/Users/cal/DSMC_Simulations/10_2_21_atoms"


"""
    read_batch()

Reads in particle simulation data for a set of simulations generated by SPARTA and ParticleTracing.jl
"""
function read_batch()
    dirs = readdir(data_dir)
    dir_pattern = r"flow_(\d+\.?\d+)_T2_(\d+\.?\d+)"
    part_pattern = r"particles_sigma_(\d+\.?\d+)_M_(\d+\.?\d+).*out"
    cell_pattern = r"cell.surfs"

    data = DataFrame()

    for d in dirs
        dir = data_dir*"/"*d
        md = match(dir_pattern, dir)
        if md === nothing
            println("no match for: ", dir)
        else
            flow = parse(Float64, md.captures[1])
            T2 = parse(Float64, md.captures[2])
            @printf("flow: %.3f t2: %.3f\n", flow, T2)
            subdirs = readdir(dir)
            if "data" in subdirs
                files = readdir(dir*"/data")
                part_file = nothing
                geom_exists = false
                max_x = 10.0E-3
                max_y = 10.0E-3
                for f in files
                    mc = match(cell_pattern, f)
                    if !(mc === nothing)
                        fname = dir*"/data/"*f
                        box = Matrix(CSV.read(fname, header = ["min","max"], skipto=6, limit=2,ignorerepeated=true,delim=' ',silencewarnings=true))
                        max_x = box[1,2]
                        max_y = box[2,2]
                        geom_exists = true
                    end
                end
                files = readdir(dir*"/data")
                for f in files
                    md = match(part_pattern, f)
                    if !(md === nothing) && geom_exists
                        part_file = f
                        M = parse(Float64, md.captures[2])
                        sigma = parse(Float64, md.captures[1])
                        valid = false
                        linenum = 0
                        fname = dir*"/data/"*part_file
                        for line in eachline(fname)
                            if occursin("idx x y z", line)
                                valid = true
                                break
                            end
                            linenum += 1
                            if linenum > 100
                                break
                            end
                        end
                        if valid
                            println(fname)
                            table = DataFrame(CSV.read(fname,
                            header = ["idx", "x", "y", "z", "xnext", "ynext", "znext", "vx", "vy", "vz", "collides", "time"], 
                            types = [Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64],
                            skipto=linenum+2, ignorerepeated=true,delim=' '))
                            dropmissing!(table, disallowmissing=true)
                            table[!, :flow] .= flow
                            table[!, :T2] .= T2
                            table[!, :M] .= M
                            table[!, :maxx] .= max_x
                            table[!, :maxy] .= max_y
                            table[!, :sigma] .= sigma
                            append!(data, table)
                        else
                            println("particle data not valid.")
                        end
                    end
                end
            else
                println("data subdirectory not found.")
            end
        end
    end
    return data
end


data = read_batch()