using CSV, StatsPlots, Printf, DataFrames, Plots, Statistics, Distributions, LaTeXStrings, StatsBase

pyplot()

program_dir = "/home/cal/Documents/DSMC_Simulations/10_7_CaOH"
data_dir = "/home/cal/Documents/DSMC_Simulations/10_7_CaOH"
outputdir = "/home/cal/Documents/DSMC_Simulations/10_7_CaOH/summary"

dpi = 72.263
fs = 6


"""
    read_batch()

Reads in particle simulation data for a set of simulations generated by SPARTA and ParticleTracing.jl
"""
function read_batch()
    dirs = readdir()
    dir_pattern = r"flow_(\d+\.?\d+)_gap_(\d+\.?\d+)_len_(\d+\.?\d+)_T1_(\d+\.?\d+)_T2_(\d+\.?\d+)"
    part_pattern2 = r"particles_omega_(\d+\.?\d+)_M_(\d+\.?\d+).*_sigma_(\d).*out"
    part_pattern = r"particles_omega_(\d+\.?\d+)_M_(\d+\.?\d+).*out"
    cell_pattern = r"cell.surfs"

    data = DataFrame()

    for dir in dirs
        md = match(dir_pattern, dir)
        mesh = !occursin("nomesh", dir)
        if md === nothing
            println("no match for: ", dir)
        else
            flow = parse(Float64, md.captures[1])
            gap = parse(Float64, md.captures[2])
            len = parse(Float64, md.captures[3])
            T1 = parse(Float64, md.captures[4])
            T2 = parse(Float64, md.captures[5])
            @printf("flow: %.3f gap: %.3f length: %.3f\n", flow, gap, len)
            subdirs = readdir(dir)
            if "data" in subdirs
                files = readdir(dir*"/data")
                part_file = nothing
                geom_exists = false
                max_x = 10.0E-3
                max_y = 10.0E-3
                for f in files
                    mc = match(cell_pattern, f)
                    if !(mc === nothing)
                        fname = dir*"/data/"*f
                        box = Matrix(CSV.read(fname, header = ["min","max"], skipto=6, limit=2,ignorerepeated=true,delim=' ',silencewarnings=true))
                        max_x = box[1,2]
                        max_y = box[2,2]
                        geom_exists = true
                    end
                end
                files = readdir(dir*"/data")
                for f in files
                    md = match(part_pattern, f)
                    m2 = match(part_pattern2, f)
                    if !(md === nothing) && geom_exists
                        part_file = f
                        omega = parse(Float64, md.captures[1])
                        M = parse(Float64, md.captures[2])
                        sigma = (m2 === nothing) ? 1.0 : parse(Float64, m2.captures[3])
                        valid = false
                        linenum = 0
                        # fname = dir*"/"*part_file
                        fname = dir*"/data/"*part_file
                        for line in eachline(fname)
                            if occursin("idx x y z", line)
                                valid = true
                                break
                            end
                            linenum += 1
                            if linenum > 100
                                break
                            end
                        end
                        if valid
                            println(fname)
                            table = DataFrame(CSV.read(fname,
                            header = ["idx", "x", "y", "z", "xnext", "ynext", "znext", "vx", "vy", "vz", "collides", "time"], 
                            types = [Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64],
                            skipto=linenum+2, ignorerepeated=true,delim=' '))
                            dropmissing!(table, disallowmissing=true)
                            table[!, :flow] .= flow
                            table[!, :gap] .= gap
                            table[!, :len] .= len
                            table[!, :T1] .= T1
                            table[!, :T2] .= T2
                            table[!, :omega] .= omega
                            table[!, :M] .= M
                            table[!, :maxx] .= max_x
                            table[!, :maxy] .= max_y
                            table[!, :sigma] .= sigma
                            table[!, :mesh] .= mesh
                            append!(data, table)
                        else
                            println("particle data not valid.")
                        end
                    end
                end
            else
                println("data subdirectory not found.")
            end
        end
    end
    return data
end


# Loading
cd(data_dir)
data = read_batch()
cd(program_dir)

# Analysis
lens = sort!(unique(data.len))
lens = [i for i in lens] 
flows = sort!(unique(data.flow))
gaps = [i for i in unique(data.gap)]
omegas = unique(data.omega)
omegas = [i for i in omegas] 
extracted = zeros(length(lens), length(flows), length(gaps), length(omegas))
slow = zeros(length(lens), length(flows), length(gaps), length(omegas))
masses = sort!(unique(data.M))
sigmas = sort!(unique(data.sigma))
meshs = sort!(unique(data.mesh))


for (i, len) in enumerate(lens)
    for (j, flow) in enumerate(flows)
        for (k, gap) in enumerate(gaps)
            for (l, omega) in enumerate(omegas)
                part = data[(data.len .== len) .& (data.flow .== flow) .& (data.gap .== gap) .& (data.omega .== omega), :]
                extr = part[part.znext .> part.maxx, :]
                extracted[i,j,k,l] = nrow(extr)/nrow(part)
                if(isnan(extracted[i,j,k,l]))
                    extracted[i,j,k,l] = 0
                end
                slowed = extr[(extr.vz .< 15.0) .& (extr.vz .> 0.0), :]
                slow[i,j,k,l] = nrow(slowed)/nrow(part)
                if(isnan(slow[i,j,k,l]))
                    slow[i,j,k,l] = 0
                end
            end
        end
    end
end

plotdir = outputdir
plotpath = mkpath(plotdir)
cd(plotdir)
N = 1000000

colors = cgrad(:inferno, scale = :log)

bins = [i for i in 0:3:60]
slowbins = [i for i in 0:0.5:10]

meshed = data[data.mesh .== 1, :]
unmeshed = data[data.mesh .== 0, :]

extr_meshed = @sprintf("%.3E", length(meshed.mesh)/N)
extr_unmeshed = @sprintf("%.3E", length(unmeshed.mesh)/N)
v_meshed = @sprintf("%.3f", median(meshed.vz))
v_unmeshed = @sprintf("%.3f", median(unmeshed.vz))

println("v_meshed: $v_meshed")
println("v_unmeshed: $v_unmeshed")


vhist = plot(xlabel="Forward Velocity (m/s)", ylabel=L"Count (per $10^6$ per m/s)", normed=true, grid=false, framestyle = :box, size=(6*dpi, 6/1.618*dpi),
guidefontsize=fs,
tickfontsize=fs,
legendfontsize=fs)
edges = range(0.0, maximum(unmeshed.vz), length=100)
stephist!(vhist, meshed.vz, label="mesh, extr: $extr_meshed", bins = 0.0:1.0:maximum(meshed.vz)+1)
stephist!(vhist, unmeshed.vz, label="no mesh, extr: $extr_unmeshed", bins = 0.0:1.0:maximum(unmeshed.vz)+1)
savefig("vhist_fig.pdf")

cd(program_dir)
